// --- MIXINS ---

// Fluid font

@mixin fluid-type($min-font-size: font-size(root), $max-font-size: font-size(other-l),
  $lower-range: breakpoint(mobile-top), $upper-range: breakpoint(desktop)) {

  font-size: calc(#{$min-font-size} + #{(($max-font-size / ($max-font-size * 0 + 1)) -
    ($min-font-size / ($min-font-size * 0 + 1)))} * ( (100vw -
    #{$lower-range}) / #{(($upper-range / ($upper-range * 0 + 1)) - ($lower-range / ($lower-range * 0 + 1)))}));

  @media (max-width: $lower-range) {
    font-size: $min-font-size;
  }

  @media (min-width: $upper-range) {
    font-size: $max-font-size;
  }
}

// Fonts

@mixin font-face($font-family, $font-path: "../fonts/", $font-file-name: opensans, $font-style: normal, $font-weight: normal, $font-display: swap, $font-svg-id: null, $text-rendering: null, $font-formats: (eot: embedded-opentype, woff2: woff2, woff: woff, ttf: truetype, otf: opentype, svg: svg)) {
  $font-src: ();

  @each $font-ext, $font-format in $font-formats {
    @if ($font-ext == "eot") {
      $font-ext: "#{$font-ext}#iefix";
    }
    @else if ($font-ext == "svg" and $font-svg-id != null) {
      $font-ext: "#{$font-ext}#{$font-svg-id}";
    }

    $font-src: append($font-src, url("#{$font-path}#{$font-file-name}.#{$font-ext}") format("#{$font-format}"), comma);
  }

  @at-root {
    @font-face {
      font-weight: $font-weight;
      font-family: "#{$font-family}";
      font-style: $font-style;
      src: $font-src;
      font-display: $font-display;
      text-rendering: $text-rendering;
      @if (map-has-key($font-formats, eot)) {
        src: url("#{$font-path}#{$font-file-name}.eot");
      }
    }
  }
  $font-src: ();
}

@mixin font-par($family: font-family(opensans), $weight: font-weight(regular), $size: font-size(base-m), $style: normal, $color-f: color($main-c, secondary), $line-height: font-lh(base)) {
  font-weight: $weight;
  font-size: $size;
  line-height: $line-height;
  font-family: $family;
  color: $color-f;
  font-style: $style;
}

// Border

@mixin border(
  $border-size: 1px,
  $border-pattern: solid,
  $border-color: color($main-c, secondary),
  $border-position: all,
  $border-clear: none ) {
  @if $border-position == all {
    border: $border-size $border-pattern $border-color;
  }
  @else {
    border-#{$border-position}: $border-size $border-pattern $border-color;
  }
  @if $border-clear == none {
    $border-position: all;
  }
  @else {
    border-#{$border-clear}: none;
  }
}

// Border-radius

@mixin border-radius($top-left: 10px, $top-right: null, $bottom-right: null, $bottom-left: null) {
  border-radius: $top-left $top-right $bottom-right $bottom-left;
}

// Opacity

@mixin opacity($opacity: 0.5) {
  opacity: $opacity;
}

// Transform

@mixin rotate($deg: 0) {
  transform: rotate($deg + deg);
}

// Other

@mixin pseudo-ie11-fix() {
  content: "";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: block;
}

@mixin visually-hidden() {
  position: absolute;

  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;

  white-space: nowrap;

  border: 0;

  clip: rect(0 0 0 0);
  clip-path: inset(100%);
}

@mixin modal-overlay() {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: color($base-c, white);

  @include opacity();
}

@mixin clear-list() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin centerer($width: null, $height: null, $direction: both) {
  position: absolute;

  @if not $width and not $height {
    @if $direction == both {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    @else if $direction == vertical {
      top: 50%;
      transform: translateY(-50%);
    }
    @else {
      left: 50%;
      transform: translateX(-50%);
    }
  }
  @else if $width and $height {
    top: 50%;
    left: 50%;
    width: $width;
    height: $height;
    margin: -($width / 2) #{0 0} -($height / 2);
  }
  @else if not $height {
    left: 50%;
    width: $width;
    margin-left: -($width / 2);
  }
  @else {
    top: 50%;
    height: $height;
    margin-top: -($height / 2);
  }
}

@mixin flex-centerer() {
  display: flex;
  justify-content: center;
  align-items: center;
}

// UI

@mixin placeholder() {

  $prefix-list:
    "::-webkit-input-placeholder",
    ":-moz-placeholder",
    "::-moz-placeholder",
    ":-ms-input-placeholder";

  @each $prefix in $prefix-list {
    &#{$prefix} {
      @content;
    }
  }
}

@mixin card($background-color: color($base-c, white)) {
  background-color: $background-color;

  @include border(1px, solid, color($grey-c, dark), all, none);
}

@mixin box-shadow($x: 0, $y: 0, $blur: 0, $dist: 2px, $color: color($main-c, secondary), $inset: false) {
  @if $inset == true {
    box-shadow: inset $x $y $blur $dist $color;
  }
  @else {
    box-shadow: $x $y $blur $dist $color;
  }
}

@mixin pseudo-focus() {
  outline: auto 5px Highlight;
}

@mixin link() {
  @include font-par(font-family(opensans), font-weight(regular), font-size(base-m), normal, color($base-c, black), font-lh(base-md));

  &:hover {
    color: rgba(color($base-c, black), 0.6);
  }

  &:active {
    color: rgba(color($base-c, black), 0.3);
  }
}
