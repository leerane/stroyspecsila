// --- FUNCTIONS ---

// Units

@function strip-unit($number) {
  @if (type-of($number) == "number" and not unitless($number)) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Color

@function color($color-map, $color-value) {
  @if map-has-key($color-map, $color-value) {
    @return map-get($color-map, $color-value);
  }
}

// Fonts

@function font-weight($weight) {
  @if map-has-key($font-weights, $weight) {
    @return map-get($font-weights, $weight);
  }
}

@function font-size($size) {
  @if map-has-key($font-sizes, $size) {
    @return map-get($font-sizes, $size);
  }
}

@function font-family($family) {
  @if map-has-key($font-stack, $family) {
    @return map-get($font-stack, $family);
  }
}

@function font-lh($line-height) {
  @if map-has-key($font-line-height, $line-height) {
    @return map-get($font-line-height, $line-height);
  }
}

@function rem($values...) {
  $list: null;

  @each $item in $values {
    @if (type-of $item == number) {
      $result: ($item / strip-unit(font-size(root)));
      $list: append($list, #{$result}rem);
    }
  }

  @return $list;
}

// Grids

@function breakpoint($bp-size) {
  @if map-has-key($breakpoints, $bp-size) {
    @return map-get($breakpoints, $bp-size);
  }
}

// Z-index

@function z-index($value) {
  @if map-has-key($z-index, $value) {
    @return map-get($z-index, $value);
  }
}
